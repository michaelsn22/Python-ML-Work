# -*- coding: utf-8 -*-
"""Clustering on IRIS Dataset

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_6lDARUQcZB0pXPUowA7fpCSRshLidIS
"""

import numpy as np
import pandas as pd
from sklearn import datasets, metrics, cluster
import matplotlib.pyplot as plt

#read the data
iris = datasets.load_iris()
data = pd.DataFrame(iris.data, columns = iris.feature_names)
#divide
data.head()

#now we want to find # of clusters that will be optimal.
Centroid_list = []
No_of_clusters = range(1,11)

for i in No_of_clusters :
  kmeans = cluster.KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)
  kmeans.fit(data.values)
  Centroid_list.append(kmeans.inertia_) #how internally coherant clusters are

plt.plot(No_of_clusters,Centroid_list)
plt.show()

#training and scoring
kmeans = cluster.KMeans(n_clusters = 3, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)
centroid = kmeans.fit_predict(data.values)
#print(centroid)

plt.figure(figsize=(8,6))
plt.scatter(data.values[centroid == 0,0], data.values[centroid == 0,1], s = 100, c = 'red', label = 'setosa')
plt.scatter(data.values[centroid == 1,0], data.values[centroid == 1,1], s = 100, c = 'blue', label = 'versicolour')
plt.scatter(data.values[centroid == 2,0], data.values[centroid == 2,1], s = 100, c = 'green', label = 'virginica')

#centroids for each cluster
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='yellow', label = 'centroids')

plt.legend()